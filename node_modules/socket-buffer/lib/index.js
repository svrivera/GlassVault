"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
class SocketBuffer extends events_1.default {
    constructor(socket) {
        super();
        this.socket = socket;
        this.buffer = Buffer.alloc(0);
        socket.on('data', this.handleData.bind(this));
        socket.on('error', this.handleError.bind(this));
    }
    read(length, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            while (length > this.buffer.length) {
                yield this.any(timeout);
            }
            return this.cut(length);
        });
    }
    until(value, include = true, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            const values = Buffer.from(Array.isArray(value) ? value : [value]);
            let result = Buffer.alloc(0);
            const startTime = Date.now();
            while (!timeout || Date.now() - startTime > timeout) {
                const byte = yield this.read(1, timeout);
                result = Buffer.concat([result, byte]);
                const offset = result.length - values.length;
                if (result.length < values.length ||
                    Buffer.compare(result.subarray(offset), values) !== 0)
                    continue;
                return include ? result : result.subarray(0, offset);
            }
            throw new Error('Timeout error');
        });
    }
    any(timeout, ignoreBuffer = true) {
        if (!ignoreBuffer && this.buffer.length > 0)
            return Promise.resolve();
        return new Promise((resolve, reject) => {
            const timer = !timeout ? null : setTimeout(() => {
                clear();
                reject(new Error('Timeout waiting for data'));
            }, timeout);
            const onData = () => {
                clear();
                resolve();
            };
            const onError = (err) => {
                clear();
                reject(err);
            };
            const onClose = (hadError) => {
                clear();
                reject(new Error(`Socket closed. Had error: ${hadError}`));
            };
            const clear = () => {
                if (timer)
                    clearTimeout(timer);
                this.off('error', onError);
                this.off('data', onData);
                this.socket.off('close', onClose);
            };
            this.once('data', onData);
            this.once('error', onError);
            this.socket.once('close', onClose);
        });
    }
    handleData(data) {
        this.buffer = Buffer.concat([this.buffer, data]);
        this.emit('data');
    }
    handleError(error) {
        this.emit('error', error);
    }
    cut(length) {
        const sub = this.buffer.subarray(0, length);
        this.buffer = this.buffer.subarray(length);
        return sub;
    }
}
exports.default = SocketBuffer;
